#define MDATA 5
#define MCLK 6
#define motor1 7
#define motor2 8

unsigned char val = 0;
unsigned char set = 0;
unsigned long state =0;;
unsigned long ocra1;
unsigned long ocra3;
unsigned long stateocr1a=0;
unsigned long stateocr3a=0;

      
       void setOCR1A( unsigned char set )
       {   
            if((set>=0)&(set<=100))
          {       
            ocra1 =set*20+1986;
          }
      }
      
      void setOCR3A( unsigned char set )
      {   
           if((set>=0)&(set<=100))
         {
            ocra3 =set*20+1983;
         }
      }
                                                                                                           
         void move_left(char x, char y)
           {
              setOCR1A(50-x-y+2); //motor drept -rotire stanga
               setOCR3A(50-x/2-y/2+2);// motor satang - rotire stanga
           }
         
         void move_right(char x, char y)
         {
             setOCR1A(50-x/2-2-y/2-5); //motor drept -rotire dreapta
                 setOCR3A(50-x-y); //motor stang - rotire dreapta
           }



           void move_up_down(char x, char y)
           {
              setOCR1A(50-y-2-x); //motor drept - rotire drapta/stanga
           setOCR3A(50+y+x); //motor stang - rotire stanga/dreapta
           }


           void move_dial_8( char x, char y)
            {
              setOCR1A(50-x-y-2-4);  //motor drept - rotire dreapta 
            setOCR3A(50-x-y);      //motor stang - rotire dreapta 
            }

           void move_dial_24( char x, char y)
           {
             setOCR1A(50-x+y+2); //motor drept - rotire stanga
             setOCR3A(50-x+y); // motor stang - rotire stanga 
           }

           void move_dial_40( char x, char y)
           {
             setOCR1A(50+x/2-y/2+2); //motor drept - rotire stanga
             setOCR3A(50-x+y); //motor stang- rotire dreapta
           }

           void move_dial_56( char x, char y)
          {
             setOCR1A(50-x-y+2); //motor drept - rotire stanga
             setOCR3A(50+x/2+y/2); //motor stang - rotire dreapta
          }

           void pause(char x, char y)
          { 
            if((x==0)&&(y==0))
               {setOCR1A(50);
                setOCR3A(50);}
          }
              
     void setSpeedSupreme(char x, char y, char dial)
    
  {   
          pause(x,y);
       
      if((x<=6)&&(x>=-6))      
          move_up_down(x,y); 
      
       else if((y<=6)&&(y>=-6)&&(x>=0))
          move_right(x,y);
     
       else if ((y<=6)&&(y>=-6)&&(x<=0))    
         move_left(x,y); 
     
       else if (dial==8)  
         move_dial_8(x,y);
         
       else if (dial==24)  
          move_dial_24(x,y);
      
      else if (dial==40)     
         move_dial_40(x,y);
     
       else if (dial==56)
          move_dial_56(x,y);
  } 
   
  void gohi(int pin)
{
  pinMode(pin, INPUT);
  digitalWrite(pin, HIGH);
}

void golo(int pin)
{
  pinMode(pin, OUTPUT);
  digitalWrite(pin, LOW);
}

void mouse_write(char data)
{
  char i;
  char parity = 1;

  gohi(MDATA);
  gohi(MCLK);
  delayMicroseconds(300);
  golo(MCLK);
  delayMicroseconds(300);
  golo(MDATA);
  delayMicroseconds(10);
  /* start bit */
  gohi(MCLK);
  /* wait for mouse to take control of clock); */
  while (digitalRead(MCLK) == HIGH)
    ;
  /* clock is low, and we are clear to send data */
  for (i=0; i < 8; i++) {
    if (data & 0x01) {
      gohi(MDATA);
    } 
    else {
      golo(MDATA);
    }
    /* wait for clock cycle */
    while (digitalRead(MCLK) == LOW)
      ;
    while (digitalRead(MCLK) == HIGH)
      ;
    parity = parity ^ (data & 0x01);
    data = data >> 1;
  }  
  /* parity */
  if (parity) {
    gohi(MDATA);
  } 
  else {
    golo(MDATA);
  }
  while (digitalRead(MCLK) == LOW)
    ;
  while (digitalRead(MCLK) == HIGH)
    ;
  /* stop bit */
  gohi(MDATA);
  delayMicroseconds(50);
  while (digitalRead(MCLK) == HIGH)
    ;
  /* wait for mouse to switch modes */
  while ((digitalRead(MCLK) == LOW) || (digitalRead(MDATA) == LOW))
    ;
  /* put a hold on the incoming data. */
  golo(MCLK);
  //  Serial.print("done.\n");
}

/*
 * Get a byte of data from the mouse
 */
char mouse_read(void)
{
  char data = 0x00;
  int i;
  char bit = 0x01;

  //  Serial.print("reading byte from mouse\n");
  /* start the clock */
  gohi(MCLK);
  gohi(MDATA);
  delayMicroseconds(50);
  while (digitalRead(MCLK) == HIGH);
  delayMicroseconds(5);  /* not sure why */
  while (digitalRead(MCLK) == LOW) /* eat start bit */
    ;
  for (i=0; i < 8; i++) {
    while (digitalRead(MCLK) == HIGH)
      ;
    if (digitalRead(MDATA) == HIGH) {
      data = data | bit;
    }
    while (digitalRead(MCLK) == LOW)
      ;
    bit = bit << 1;
  }
  /* eat parity bit, which we ignore */
  while (digitalRead(MCLK) == HIGH)
    ;
  while (digitalRead(MCLK) == LOW)
    ;
  /* eat stop bit */
  while (digitalRead(MCLK) == HIGH)
    ;
  while (digitalRead(MCLK) == LOW)
    ;

  /* put a hold on the incoming data. */
  golo(MCLK);
 
  return data;
}

void mouse_init()
{
  gohi(MCLK);
  gohi(MDATA);
  //  Serial.print("Sending reset to mouse\n");
  mouse_write(0xff);
  mouse_read();  /* ack byte */
  //  Serial.print("Read ack byte1\n");
  mouse_read();  /* blank */
  mouse_read();  /* blank */
  //  Serial.print("Sending remote mode code\n");
  mouse_write(0xf0);  /* remote mode */
  mouse_read();  /* ack */
  //  Serial.print("Read ack byte2\n");
  delayMicroseconds(100);
}

void setup()
{  
   Serial.begin(9600);
  mouse_init();
  pinMode(motor1, OUTPUT);
  pinMode(motor2, OUTPUT);
  
  noInterrupts();
  TCNT1=0;                    
  TCCR1A=0;
  TCCR1B=0;
  TCCR1C=0;
  
  TCNT3=0;                    
  TCCR3A=0;
  TCCR3B=0;
  TCCR3C=0;
  
  TCCR1B |= (1<<WGM12); 
  TIMSK1 |= (1 << OCIE1A); 
  OCR1A=39965;;
  ocra1 = 2975;
  TCCR1B |= (1<<CS11);


  
  TCCR3B |= (1<<WGM32);
  TIMSK3 |= (1 << OCIE3A); 
  OCR3A=39965;;
  ocra3 = 2975;
  TCCR3B |= (1<<CS31);
  sei();
}
ISR(TIMER1_COMPA_vect) 
 {
    if(stateocr1a==0)
     {
        OCR1A=39965;;
        digitalWrite(motor2,0);   
        stateocr1a=1;
     }

     else if(stateocr1a==1)
      {
         OCR1A=ocra1;
         digitalWrite(motor2,1); 
         stateocr1a=0;
      }
   
  }  

      ISR(TIMER3_COMPA_vect) 
  {
    if(stateocr3a==0)
      {
        OCR3A=39965;;
        digitalWrite(motor1,0);   
        stateocr3a=1;
      }

     else if(stateocr3a==1)
       {
         OCR3A=ocra3;
         digitalWrite(motor1,1); 
         stateocr3a=0;
       }
  }  

void loop()
{ 
  char mstat;
  char mx;
  char my;
//   setOCR3A(50);
//   setOCR1A(50);
  /* get a reading from the mouse */
   mouse_write(0xeb);  /* give me data! */
   mouse_read();      /* ignore ack */
   mstat = mouse_read();
   mx = mouse_read();
   my = mouse_read();

 /* send the data back up */
  Serial.print(mstat, DEC);
  Serial.print("\tX=");
  Serial.print(mx, DEC);
  Serial.print("\tY=");
  Serial.print(my, DEC);
  Serial.println();
  setSpeedSupreme(mx,my,mstat);
  delay(20);
 
}